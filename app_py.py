# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TqksKPoQmADvLbOGfUwaB8GKDnR1FwiC
"""

import streamlit as st
import joblib
import numpy as np
import pandas as pd

# Load model and encoders
model = joblib.load('rf_model.pkl')
ordinal_encoder = joblib.load('ordinal_encoder.pkl')       # for ST_Slope
onehot_encoder = joblib.load('onehot_encoder.pkl')         # for Gender, ChestPainType, FastingBS, etc.
scaler = joblib.load('scaler.pkl')                         # for numerical

# Define input fields
st.title("Heart Disease Prediction App")

# Numerical
age = st.number_input('Age', min_value=0, max_value=120)
resting_bp = st.number_input('Resting Blood Pressure', min_value=0)
cholesterol = st.number_input('Cholesterol', min_value=0)
max_hr = st.number_input('Max Heart Rate', min_value=0)
oldpeak = st.number_input('Oldpeak (ST depression)', min_value=0.0, format="%.2f")

# Categorical
gender = st.selectbox('Gender', ['M', 'F'])
chest_pain = st.selectbox('Chest Pain Type', ['TA', 'ATA', 'NAP', 'ASY'])
fasting_bs = st.selectbox('Fasting Blood Sugar > 120 mg/dl', ['0', '1'])
resting_ecg = st.selectbox('Resting ECG', ['Normal', 'ST', 'LVH'])
exercise_angina = st.selectbox('Exercise Induced Angina', ['N', 'Y'])
st_slope = st.selectbox('ST Slope', ['Down', 'Flat', 'Up'])

# Predict button
if st.button('Predict'):
    # Organize numerical features
    num_input = pd.DataFrame([[age, resting_bp, cholesterol, max_hr, oldpeak]],
                             columns=['Age', 'RestingBP', 'Cholesterol', 'MaxHR', 'Oldpeak'])
    num_scaled = scaler.transform(num_input)

    # ST_Slope ordinal
    slope_encoded = ordinal_encoder.transform([[st_slope]])

    # Categorical one-hot
    cat_input = pd.DataFrame([[gender, chest_pain, fasting_bs, resting_ecg, exercise_angina]],
                             columns=['Gender', 'ChestPainType', 'FastingBS', 'RestingECG', 'ExerciseAngina'])
    cat_encoded = onehot_encoder.transform(cat_input)

    # Final input
    final_input = np.hstack([num_scaled, cat_encoded, slope_encoded])

    # Predict
    prediction = model.predict(final_input)[0]
    label = "Heart Disease Detected" if prediction == 1 else "No Heart Disease"
    st.success(f"Prediction: {label}")